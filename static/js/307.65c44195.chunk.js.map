{"version":3,"file":"static/js/307.65c44195.chunk.js","mappings":"sLACaA,E,QAAcC,GAAAA,EAAH,kF,SCCXC,EAAQ,WACnB,OAAO,SAACF,EAAD,4DACR,C,6ECFYG,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,MAAM,MACNC,MAAM,WAGX,C,oKCPYC,EAAaL,EAAAA,GAAAA,GAAH,oJAUVM,EAAaN,EAAAA,GAAAA,EAAH,kE,4BC0CvB,EA9CmB,WACjB,OAA4BO,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGAEhBN,GAAa,GACbE,EAAS,MAHO,UAIOK,EAAAA,EAAAA,IAAgBJ,GAJvB,OAIVK,EAJU,OAKhBV,EAAUU,EAASC,SALH,gDAOhBP,EAAS,EAAD,IACRQ,MAAM,EAAD,IARW,yBAUhBV,GAAa,GAVG,4EAAH,qDAcjBM,GACD,GAAE,CAACH,KAGF,2BACGF,IAAS,SAACX,EAAA,EAAD,IACTS,IAAa,SAACR,EAAA,EAAD,KACZQ,GAAaF,EAAOc,OAAS,IAC7B,0BACE,wBACGd,EAAOe,KAAI,gBAAGT,EAAH,EAAGA,GAAIU,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,UAACpB,EAAD,YACE,UAACC,EAAD,qBAAoBkB,MACpB,uBAAIC,MAFWX,EADP,SAShBJ,IAAcE,GAA2B,IAAlBJ,EAAOc,SAAgB,qDAGrD,C,yLClDKI,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAc,mCAAG,oGACLL,EAASM,IAAI,uBADR,cACtBb,EADsB,yBAErBA,EAASc,MAFY,2CAAH,qDAKdC,EAAc,mCAAG,WAAMC,GAAN,uFACLT,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNM,MAAAA,KAHwB,cACtBhB,EADsB,yBAMrBA,EAASc,MANY,2CAAH,sDASdG,EAAe,mCAAG,WAAMC,GAAN,uFACNX,EAASM,IAAT,iBAAuBK,IADjB,cACvBlB,EADuB,yBAEtBA,EAASc,MAFa,2CAAH,sDAKfK,EAAY,mCAAG,WAAMD,GAAN,uFACHX,EAASM,IAAT,iBAAuBK,EAAvB,aADG,cACpBlB,EADoB,yBAEnBA,EAASc,MAFU,2CAAH,sDAKZf,EAAe,mCAAG,WAAMmB,GAAN,uFACNX,EAASM,IAAT,iBAAuBK,EAAvB,aADM,cACvBlB,EADuB,yBAEtBA,EAASc,MAFa,2CAAH,qD","sources":["components/Error/Error.styled.js","components/Error/Error.jsx","components/Loader/Loader.jsx","pages/MoviesPage/MovieDetailsPage/ReviewsPage/ReviewPage.styled.js","pages/MoviesPage/MovieDetailsPage/ReviewsPage/ReviewPage.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\nexport const ErrorStyled = styled.p`\n  color: red;\n  text-align: center;\n  font-size: 25px;\n`;\n","import { ErrorStyled } from './Error.styled';\n\nexport const Error = () => {\n  return <ErrorStyled>Something went wrong... Try reloading the page</ErrorStyled>;\n};\n","import { InfinitySpin } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <InfinitySpin\n      width='200'\n      color=\"#4fa94d\"\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const ItemStyled = styled.li`\n  font-size: 22px;\n  list-style: inside;\n  text-align: justify;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const TextStyled = styled.p`\n  display: inline;\n  font-weight: bold;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/Api';\n\nimport { ItemStyled, TextStyled } from './ReviewPage.styled';\nimport { Error } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\n\nconst ReviewPage = () => {\n  const [review, setReview] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchReview = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const response = await getMovieReviews(id);\n        setReview(response.results);\n      } catch (error) {\n        setError(error);\n        alert(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchReview();\n  }, [id]);\n\n  return (\n    <div>\n      {error && <Error />}\n      {isLoading && <Loader />}\n      {!isLoading && review.length > 0 && (\n        <div>\n          <ul>\n            {review.map(({ id, author, content }) => (\n              <ItemStyled key={id}>\n                <TextStyled>Author {author}</TextStyled>\n                <p>{content}</p>\n              </ItemStyled>\n            ))}\n          </ul>\n        </div>\n      )}\n      {!isLoading && !error && review.length === 0 && <p>There is no information</p>}\n    </div>\n  );\n};\n\nexport default ReviewPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e50c4e0f404e411eea1bbde1fa2e92d4',\n  },\n});\n\nexport const getTrendMovies = async () => {\n  const response = await instance.get('/trending/movie/day');\n  return response.data;\n};\n\nexport const getMovieByName = async query => {\n  const response = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const response = await instance.get(`/movie/${movie_id}`);\n  return response.data;\n};\n\nexport const getMovieCast = async movie_id => {\n  const response = await instance.get(`/movie/${movie_id}/credits`);\n  return response.data;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const response = await instance.get(`/movie/${movie_id}/reviews`);\n  return response.data;\n};\n"],"names":["ErrorStyled","styled","Error","Loader","width","color","ItemStyled","TextStyled","useState","review","setReview","isLoading","setIsLoading","error","setError","id","useParams","useEffect","fetchReview","getMovieReviews","response","results","alert","length","map","author","content","instance","axios","baseURL","params","api_key","getTrendMovies","get","data","getMovieByName","query","getMovieDetails","movie_id","getMovieCast"],"sourceRoot":""}