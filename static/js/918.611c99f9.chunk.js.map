{"version":3,"file":"static/js/918.611c99f9.chunk.js","mappings":"sLACaA,E,QAAcC,GAAAA,EAAH,kF,SCCXC,EAAQ,WACnB,OAAO,SAACF,EAAD,4DACR,C,6ECFYG,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,MAAM,MACNC,MAAM,WAGX,C,2KCPYC,E,QAAaL,GAAAA,GAAH,6U,SC8DvB,EAxDiB,WACf,OAAwBM,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdN,GAAa,GACbE,EAAS,MAHK,UAISK,EAAAA,EAAAA,IAAaJ,GAJtB,OAIRK,EAJQ,OAKdV,EAAQU,EAASX,MALH,gDAOdK,EAAS,EAAD,IACRO,MAAM,EAAD,IARS,yBAUdT,GAAa,GAVC,4EAAH,qDAcfM,GACD,GAAE,CAACH,KAGF,2BACGF,IAAS,SAACV,EAAA,EAAD,IACTQ,IAAa,SAACP,EAAA,EAAD,KACZO,GAAaF,EAAKa,OAAS,IAC3B,0BACE,SAACf,EAAD,UACGE,EAAKc,KAAI,gBAAGR,EAAH,EAAGA,GAAIS,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,2BACE,gBACEC,IACEH,EAAY,wCACyBA,GACjC,4FAENI,IAAKH,EACLpB,MAAM,MACNwB,QAAQ,UAEV,uBAAIJ,KACJ,uCAAeC,OAZRX,EADD,SAmBdJ,IAAcE,GAAyB,IAAhBJ,EAAKa,SAAgB,qDAGnD,C,yLC5DKQ,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAc,mCAAG,oGACLL,EAASM,IAAI,uBADR,cACtBhB,EADsB,yBAErBA,EAASiB,MAFY,2CAAH,qDAKdC,EAAc,mCAAG,WAAMC,GAAN,uFACLT,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNM,MAAAA,KAHwB,cACtBnB,EADsB,yBAMrBA,EAASiB,MANY,2CAAH,sDASdG,EAAe,mCAAG,WAAMC,GAAN,uFACNX,EAASM,IAAT,iBAAuBK,IADjB,cACvBrB,EADuB,yBAEtBA,EAASiB,MAFa,2CAAH,sDAKflB,EAAY,mCAAG,WAAMsB,GAAN,uFACHX,EAASM,IAAT,iBAAuBK,EAAvB,aADG,cACpBrB,EADoB,yBAEnBA,EAASiB,MAFU,2CAAH,sDAKZK,EAAe,mCAAG,WAAMD,GAAN,uFACNX,EAASM,IAAT,iBAAuBK,EAAvB,aADM,cACvBrB,EADuB,yBAEtBA,EAASiB,MAFa,2CAAH,qD","sources":["components/Error/Error.styled.js","components/Error/Error.jsx","components/Loader/Loader.jsx","pages/MoviesPage/MovieDetailsPage/CastPage/CastPage.styled.js","pages/MoviesPage/MovieDetailsPage/CastPage/CastPage.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\nexport const ErrorStyled = styled.p`\n  color: red;\n  text-align: center;\n  font-size: 25px;\n`;\n","import { ErrorStyled } from './Error.styled';\n\nexport const Error = () => {\n  return <ErrorStyled>Something went wrong... Try reloading the page</ErrorStyled>;\n};\n","import { InfinitySpin } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <InfinitySpin\n      width='200'\n      color=\"#4fa94d\"\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListStyled = styled.ul`\n  display: grid;\n  align-items: baseline;\n  justify-items: stretch;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/Api';\nimport { Error } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { ListStyled } from './CastPage.styled';\n\nconst CastPage = () => {\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const response = await getMovieCast(id);\n        setCast(response.cast);\n      } catch (error) {\n        setError(error);\n        alert(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [id]);\n\n  return (\n    <div>\n      {error && <Error />}\n      {isLoading && <Loader />}\n      {!isLoading && cast.length > 0 && (\n        <div>\n          <ListStyled>\n            {cast.map(({ id, profile_path, name, character }) => (\n              <li key={id}>\n                <img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w92${profile_path}`\n                      : 'https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-'\n                  }\n                  alt={name}\n                  width=\"150\"\n                  loading=\"lazy\"\n                />\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </li>\n            ))}\n          </ListStyled>\n        </div>\n      )}\n      {!isLoading && !error && cast.length === 0 && <p>There is no information</p>}\n    </div>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e50c4e0f404e411eea1bbde1fa2e92d4',\n  },\n});\n\nexport const getTrendMovies = async () => {\n  const response = await instance.get('/trending/movie/day');\n  return response.data;\n};\n\nexport const getMovieByName = async query => {\n  const response = await instance.get('/search/movie', {\n    params: {\n      query,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const response = await instance.get(`/movie/${movie_id}`);\n  return response.data;\n};\n\nexport const getMovieCast = async movie_id => {\n  const response = await instance.get(`/movie/${movie_id}/credits`);\n  return response.data;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const response = await instance.get(`/movie/${movie_id}/reviews`);\n  return response.data;\n};\n"],"names":["ErrorStyled","styled","Error","Loader","width","color","ListStyled","useState","cast","setCast","isLoading","setIsLoading","error","setError","id","useParams","useEffect","fetchCast","getMovieCast","response","alert","length","map","profile_path","name","character","src","alt","loading","instance","axios","baseURL","params","api_key","getTrendMovies","get","data","getMovieByName","query","getMovieDetails","movie_id","getMovieReviews"],"sourceRoot":""}